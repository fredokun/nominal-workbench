# Peano grammar.
kind Nat : type
constant Zero : Nat

operator Successor : Nat -> Nat
operator Add : Nat * Nat -> Nat

rule [add-nil-left] :
  Add(Zero, ?n) => ?n

rule [add-nil-right] :
  Add(?n, Zero) => ?n

rule [add-l] :
  Add(Successor(?u), ?v) => Successor(Add(?u, ?v))

rule [add-r] :
  Add(?u, Successor(?v)) => Successor(Add(?u, ?v))

# Additional rules

rule [is-add] :
  Add(?u, ?v) => Add(?u, ?v)

rule [add-one-add] :
  Add(?a, ?b) => Successor(Add(?a, ?b))

strategy Dummy : id() # do nothing
strategy TryBasicRules : 
  [add-nil-right] +>
  [add-nil-left] +>
  [add-l] +>
  [add-r] +>
  id()

strategy Topdown2(s) :
  s ; all(Topdown2(s))

strategy Bottomup2(s) :
  all(Bottomup2(s)) ; s

strategy Any(s) : 
  s +> one(Any(s)) # use of recursion
#  rec(a, s +> one(a))

strategy While(p, s) :
  (test(p) ; s ; While(p, s)) +> id()
#rec(b, (test(p) ; s ; b) +> id())

strategy TopdownAll : 
  While(Any([is-add]), Topdown2(TryBasicRules))

strategy BottomupAll : 
  While(Any([is-add]), Bottomup(TryBasicRules))

strategy AddOne : Try([add-one-add])
strategy AddOneResult : AddOne ; BottomupAll

# Tests

:test rewrite Add(Zero,Successor(Zero)) with TopdownAll --equal Successor(Zero)
:test rewrite Add(Zero,Successor(Zero)) with BottomupAll
  --equal Successor(Zero)

:test rewrite Add(Zero,Successor(Zero)) with Any([is-add])
  --equal Add(Zero, Successor(Zero))

:test rewrite Successor(Add(Zero, Zero)) with Any([is-add])
  --equal Successor(Add(Zero, Zero))

:test rewrite Add(Successor(Zero), Successor(Zero)) with BottomupAll ; BottomupAll
  --equal Successor(Successor(Zero))

:test rewrite Add(Successor(Add(Successor(Zero), Zero)), Successor(Zero))
  with BottomupAll
  --equal Successor(Successor(Successor(Zero)))

:test rewrite Add(Zero,Successor(Zero)) with Dummy --equal Add(Zero,Successor(Zero))

:test rewrite Add(Zero,Successor(Zero)) with AddOne --equal Successor(Add(Zero, Successor(Zero)))
:test rewrite Add(Zero,Successor(Zero)) with AddOneResult --equal Successor(Successor(Zero))

:test rewrite Add(Zero,Successor(Zero)) 
  with AddOneResult + id() 
  --equal Successor(Successor(Zero)) ; Add(Zero, Successor(Zero))

# Erroneous cases

:test Successor(0) --failwith TermSystemError.UnknownSymbol
:test Successor --failwith TermSystemError.WrongTermArity
:test Successor(Zero,Zero) --failwith TermSystemError.WrongTermArity
:test Successor(Zero,Zero) --failwith TermSystemError.WrongTermArity
:test Successor(TestConstant) --failwith TermSystemError.UnknownSymbol

