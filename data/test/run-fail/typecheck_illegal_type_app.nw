kind List : type -> type
kind Nat : type

constant Nil : forall(A).List<A>

operator Cons: forall(A).A * List<A> -> List<A>
operator Successor: forall(B).B -> B
operator Toto: forall(A).A<Nat> -> List<A>


rule [length] :
  Cons(_, ?y) => Successor(?y)

rule [length2] :
  Cons(_, Nil) => Successor(Nil)
